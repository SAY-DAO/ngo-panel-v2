export default function needListSerializer(flaskNeed, i) {
  return {
    needId: flaskNeed[i].id,
    title: flaskNeed[i].name,
    affiliateLinkUrl: flaskNeed[i].affiliateLinkUrl,
    link: flaskNeed[i].link,
    bankTrackId: flaskNeed[i].bank_track_id,
    category: flaskNeed[i].category,
    childGeneratedCode: flaskNeed[i].childGeneratedCode,
    childSayName: flaskNeed[i].childSayName,
    childDeliveryDate: flaskNeed[i].child_delivery_date,
    childId: flaskNeed[i].child_id,
    confirmDate: flaskNeed[i].confirmDate,
    confirmUser: flaskNeed[i].confirmUser,
    cost: flaskNeed[i].cost,
    created: flaskNeed[i].created,
    createdById: flaskNeed[i].created_by_id,
    deletedAt: flaskNeed[i].deleted_at,
    description: flaskNeed[i].description,
    descriptionTranslations: flaskNeed[i].description_translations, // { en: '' , fa: ''}
    titleTranslations: flaskNeed[i].name_translations, // { en: '' , fa: ''}
    details: flaskNeed[i].details,
    doingDuration: flaskNeed[i].doing_duration,
    donated: flaskNeed[i].donated,
    doneAt: flaskNeed[i].doneAt,
    expectedDeliveryDate: flaskNeed[i].expected_delivery_date,
    information: flaskNeed[i].information,
    isConfirmed: flaskNeed[i].isConfirmed,
    isDeleted: flaskNeed[i].isDeleted,
    isDone: flaskNeed[i].isDone,
    isReported: flaskNeed[i].isReported,
    isUrgent: flaskNeed[i].isUrgent,
    ngoId: flaskNeed[i].ngoId,
    ngoAddress: flaskNeed[i].ngoAddress,
    ngoName: flaskNeed[i].ngoName,
    ngoDeliveryDate: flaskNeed[i].ngo_delivery_date,
    oncePurchased: flaskNeed[i].oncePurchased,
    paid: flaskNeed[i].paid,
    purchaseCost: flaskNeed[i].purchase_cost,
    purchaseDate: flaskNeed[i].purchase_date,
    receiptCount: flaskNeed[i].receipt_count,
    receipts: flaskNeed[i].receipts,
    status: flaskNeed[i].status,
    statusDescription: flaskNeed[i].status_description,
    statusUpdatedAt: flaskNeed[i].status_updated_at,
    type: flaskNeed[i].type,
    typeName: flaskNeed[i].type_name,
    unavailableFrom: flaskNeed[i].unavailable_from,
    unconfirmedAt: flaskNeed[i].unconfirmed_at,
    unpaidCost: flaskNeed[i].unpaid_cost,
    unpayable: flaskNeed[i].unpayable,
    unpayableFrom: flaskNeed[i].unpayable_from,
    updated: flaskNeed[i].updated,
    payments: flaskNeed[i].payments, // []
    imageUrl: flaskNeed[i].imageUrl,
    needRetailerImg: flaskNeed[i].img,
  };
}

export function needSerializer(flaskNeed) {
  return {
    needId: flaskNeed.id,
    title: flaskNeed.name,
    affiliateLinkUrl: flaskNeed.affiliateLinkUrl,
    link: flaskNeed.link,
    bankTrackId: flaskNeed.bank_track_id,
    category: flaskNeed.category,
    childGeneratedCode: flaskNeed.childGeneratedCode,
    childSayName: flaskNeed.childSayName,
    childDeliveryDate: flaskNeed.child_delivery_date,
    childId: flaskNeed.child_id,
    confirmDate: flaskNeed.confirmDate,
    confirmUser: flaskNeed.confirmUser,
    cost: flaskNeed.cost,
    created: flaskNeed.created,
    createdById: flaskNeed.created_by_id,
    deletedAt: flaskNeed.deleted_at,
    description: flaskNeed.description,
    descriptionTranslations: flaskNeed.description_translations, // { en: '' , fa: ''}
    titleTranslations: flaskNeed.name_translations, // { en: '' , fa: ''}
    details: flaskNeed.details,
    doingDuration: flaskNeed.doing_duration,
    donated: flaskNeed.donated,
    doneAt: flaskNeed.doneAt,
    expectedDeliveryDate: flaskNeed.expected_delivery_date,
    information: flaskNeed.information,
    isConfirmed: flaskNeed.isConfirmed,
    isDeleted: flaskNeed.isDeleted,
    isDone: flaskNeed.isDone,
    isReported: flaskNeed.isReported,
    isUrgent: flaskNeed.isUrgent,
    ngoId: flaskNeed.ngoId,
    ngoAddress: flaskNeed.ngoAddress,
    ngoName: flaskNeed.ngoName,
    ngoDeliveryDate: flaskNeed.ngo_delivery_date,
    oncePurchased: flaskNeed.oncePurchased,
    paid: flaskNeed.paid,
    purchaseCost: flaskNeed.purchase_cost,
    purchaseDate: flaskNeed.purchase_date,
    receiptCount: flaskNeed.receipt_count,
    receipts: flaskNeed.receipts, // when accordion opens we request receipts
    status: flaskNeed.status,
    statusDescription: flaskNeed.status_description,
    statusUpdatedAt: flaskNeed.status_updated_at,
    type: flaskNeed.type,
    typeName: flaskNeed.type_name,
    unavailableFrom: flaskNeed.unavailable_from,
    unconfirmedAt: flaskNeed.unconfirmed_at,
    unpaidCost: flaskNeed.unpaid_cost,
    unpayable: flaskNeed.unpayable,
    unpayableFrom: flaskNeed.unpayable_from,
    updated: flaskNeed.updated,
    payments: flaskNeed.payments,
    imageUrl: flaskNeed.imageUrl,
    needRetailerImg: flaskNeed.img,
  };
}
